{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport TaskInput from \"./TaskInput\";\nimport \"./styles.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    tasks = _useState4[0],\n    setTasks = _useState4[1];\n  useEffect(function () {\n    loadTasks();\n  }, []);\n  useEffect(function () {\n    saveTasks();\n  }, [tasks]);\n  var addTask = function addTask(newTask) {\n    setTasks([].concat(_toConsumableArray(tasks), [newTask]));\n    setModalVisible(false);\n  };\n  var markTaskAsCompleted = function markTaskAsCompleted(taskId) {\n    var updatedTasks = tasks.map(function (task) {\n      return task.id === taskId ? _objectSpread(_objectSpread({}, task), {}, {\n        completed: true\n      }) : task;\n    });\n    setTasks(updatedTasks);\n  };\n  var deleteTask = function deleteTask(taskId) {\n    var updatedTasks = tasks.filter(function (task) {\n      return task.id !== taskId;\n    });\n    setTasks(updatedTasks);\n  };\n  var saveTasks = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.setItem('tasks', JSON.stringify(tasks));\n      } catch (error) {\n        console.error('Error saving tasks to AsyncStorage:', error);\n      }\n    });\n    return function saveTasks() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var loadTasks = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var savedTasks = yield AsyncStorage.getItem('tasks');\n        if (savedTasks !== null) {\n          setTasks(JSON.parse(savedTasks));\n        }\n      } catch (error) {\n        console.error('Error loading tasks from AsyncStorage:', error);\n      }\n    });\n    return function loadTasks() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [tasks.map(function (task) {\n      return _jsxs(View, {\n        children: [_jsxs(TouchableOpacity, {\n          style: styles.taskContainer,\n          onPress: function onPress() {\n            return markTaskAsCompleted(task.id);\n          },\n          children: [_jsx(Text, {\n            style: [styles.taskName, task.completed && styles.completedTaskName],\n            children: task.name\n          }), _jsx(Text, {\n            style: styles.taskDescription,\n            children: task.description\n          })]\n        }), _jsx(TouchableOpacity, {\n          style: styles.deleteButton,\n          onPress: function onPress() {\n            return deleteTask(task.id);\n          },\n          children: _jsx(Text, {\n            style: styles.deleteButtonText,\n            children: \"Eliminar\"\n          })\n        })]\n      }, task.id);\n    }), _jsx(TaskInput, {\n      addTask: addTask,\n      modalVisible: modalVisible,\n      setModalVisible: setModalVisible\n    })]\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","View","Modal","TouchableOpacity","Text","StyleSheet","AsyncStorage","TaskInput","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","_useState3","_useState4","tasks","setTasks","loadTasks","saveTasks","addTask","newTask","concat","_toConsumableArray","markTaskAsCompleted","taskId","updatedTasks","map","task","id","_objectSpread","completed","deleteTask","filter","_ref","_asyncToGenerator","setItem","JSON","stringify","error","console","apply","arguments","_ref2","savedTasks","getItem","parse","children","style","styles","taskContainer","onPress","taskName","completedTaskName","name","taskDescription","description","deleteButton","deleteButtonText"],"sources":["C:/Users/devandroid/Desktop/Nueva carpeta/Lista-De-Tareas/Componentes/Aplicacion.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  Modal,\r\n  TextInput,\r\n  FlatList,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst App = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Cargar las tareas almacenadas en AsyncStorage al inicio\r\n  useEffect(() => {\r\n    loadTasks();\r\n  }, []);\r\n\r\n  // Guardar las tareas en AsyncStorage cuando se actualice la lista de tareas\r\n  useEffect(() => {\r\n    saveTasks();\r\n  }, [tasks]);\r\n\r\n  const addTask = () => {\r\n    if (taskName.trim() === '') {\r\n      return;\r\n    }\r\n    const newTask = {\r\n      id: Date.now().toString(),\r\n      name: taskName,\r\n      description: taskDescription,\r\n      completed: false,\r\n    };\r\n    setTasks([...tasks, newTask]);\r\n    setTaskName('');\r\n    setTaskDescription('');\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const markTaskAsCompleted = (taskId) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === taskId ? { ...task, completed: true } : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const saveTasks = async () => {\r\n    try {\r\n      await AsyncStorage.setItem('tasks', JSON.stringify(tasks));\r\n    } catch (error) {\r\n      console.error('Error saving tasks to AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  const loadTasks = async () => {\r\n    try {\r\n      const savedTasks = await AsyncStorage.getItem('tasks');\r\n      if (savedTasks !== null) {\r\n        setTasks(JSON.parse(savedTasks));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading tasks from AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  const renderTask = ({ item }) => (\r\n    <View style={styles.taskContainer}>\r\n      <TouchableOpacity\r\n        style={styles.taskButton}\r\n        onPress={() => markTaskAsCompleted(item.id)}\r\n      >\r\n        <Text\r\n          style={[\r\n            styles.taskName,\r\n            item.completed && styles.completedTaskName,\r\n          ]}\r\n        >\r\n          {item.name}\r\n        </Text>\r\n        <Text style={styles.taskDescription}>{item.description}</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity\r\n        style={styles.deleteButton}\r\n        onPress={() => deleteTask(item.id)}\r\n      >\r\n        <Text style={styles.deleteButtonText}>Eliminar</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}\r\n    backgroundColor=\"orange\">\r\n      \r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={false}\r\n        visible={modalVisible}\r\n        onRequestClose={() => setModalVisible(false)}\r\n      >\r\n        <View style={styles.modalContainer}>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Nombre de la tarea\"\r\n            value={taskName}\r\n            onChangeText={(text) => setTaskName(text)}\r\n          />\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"DescripciÃ³n de la tarea\"\r\n            value={taskDescription}\r\n            onChangeText={(text) => setTaskDescription(text)}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.addButton}\r\n            onPress={() => addTask()}\r\n          >\r\n            <Text style={styles.addButtonText}>Agregar Tarea</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </Modal>\r\n      <FlatList\r\n        data={tasks}\r\n        renderItem={renderTask}\r\n        keyExtractor={(item) => item.id}\r\n      />\r\n      <TouchableOpacity\r\n        style={styles.addButton}\r\n        onPress={() => setModalVisible(true)}\r\n      >\r\n        <Text style={styles.addButtonText}>Agregar Tarea</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#0c3f6a', \r\n  },\r\n  modalContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n    backgroundColor: '#0c3f6a', \r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: '60%',\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 10,\r\n    paddingHorizontal: 10,\r\n    backgroundColor: '#31a8ae',\r\n  },\r\n  addButton: {\r\n    backgroundColor: '#31a8ae', \r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  addButtonText: {\r\n    color: '#f3f0cd',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  taskContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: 'gray',\r\n    paddingVertical: 10,\r\n    backgroundColor: '#f3f0cd',\r\n    borderRadius: 10, \r\n  },\r\n  taskButton: {\r\n    flex: 1,\r\n  },\r\n  taskName: {\r\n    fontSize: 22,\r\n    flex: 1,\r\n  },\r\n  completedTaskName: {\r\n    textDecorationLine: 'line-through',\r\n    fontWeight: 'bold',\r\n    color: 'gray',\r\n    borderRadius: 10,\r\n  },\r\n  deleteButton: {\r\n    marginLeft: 10,\r\n    backgroundColor: 'red', \r\n    padding: 5,\r\n    borderRadius: 5,\r\n  },\r\n  deleteButtonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  \r\n  taskDescription: {\r\n    fontSize: 18,\r\n    color: 'gray',\r\n  },\r\n});\r\n\r\nexport default App;*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Modal, TouchableOpacity, Text, StyleSheet } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport TaskInput from './TaskInput';\r\nimport './styles.css'; // Importa los estilos desde un archivo compartido\r\n\r\nconst App = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadTasks();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    saveTasks();\r\n  }, [tasks]);\r\n\r\n  const addTask = (newTask) => {\r\n    setTasks([...tasks, newTask]);\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const markTaskAsCompleted = (taskId) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === taskId ? { ...task, completed: true } : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const saveTasks = async () => {\r\n    try {\r\n      await AsyncStorage.setItem('tasks', JSON.stringify(tasks));\r\n    } catch (error) {\r\n      console.error('Error saving tasks to AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  const loadTasks = async () => {\r\n    try {\r\n      const savedTasks = await AsyncStorage.getItem('tasks');\r\n      if (savedTasks !== null) {\r\n        setTasks(JSON.parse(savedTasks));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading tasks from AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View >\r\n      {/* Renderizar la lista de tareas directamente */}\r\n      {tasks.map((task) => (\r\n        <View key={task.id}>\r\n          <TouchableOpacity\r\n            style={styles.taskContainer}\r\n            onPress={() => markTaskAsCompleted(task.id)}\r\n          >\r\n            <Text\r\n              style={[\r\n                styles.taskName,\r\n                task.completed && styles.completedTaskName,\r\n              ]}\r\n            >\r\n              {task.name}\r\n            </Text>\r\n            <Text style={styles.taskDescription}>{task.description}</Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={styles.deleteButton}\r\n            onPress={() => deleteTask(task.id)}\r\n          >\r\n            <Text style={styles.deleteButtonText}>Eliminar</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      ))}\r\n\r\n      {/* Renderizar el componente TaskInput */}\r\n      <TaskInput addTask={addTask} modalVisible={modalVisible} setModalVisible={setModalVisible} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n"],"mappings":";;;;;;AA+NA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAEnD,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,OAAOC,SAAS;AAChB;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtB,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,SAAA,GAAwCd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhDG,YAAY,GAAAF,UAAA;IAAEG,eAAe,GAAAH,UAAA;EACpC,IAAAI,UAAA,GAA0BnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA/BE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtBnB,SAAS,CAAC,YAAM;IACdsB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,YAAM;IACduB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEX,IAAMI,OAAO,GAAG,SAAVA,OAAOA,CAAIC,OAAO,EAAK;IAC3BJ,QAAQ,IAAAK,MAAA,CAAAC,kBAAA,CAAKP,KAAK,IAAEK,OAAO,EAAC,CAAC;IAC7BR,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,MAAM,EAAK;IACtC,IAAMC,YAAY,GAAGV,KAAK,CAACW,GAAG,CAAC,UAACC,IAAI;MAAA,OAClCA,IAAI,CAACC,EAAE,KAAKJ,MAAM,GAAAK,aAAA,CAAAA,aAAA,KAAQF,IAAI;QAAEG,SAAS,EAAE;MAAI,KAAKH,IAAI;IAAA,CAC1D,CAAC;IACDX,QAAQ,CAACS,YAAY,CAAC;EACxB,CAAC;EAED,IAAMM,UAAU,GAAG,SAAbA,UAAUA,CAAIP,MAAM,EAAK;IAC7B,IAAMC,YAAY,GAAGV,KAAK,CAACiB,MAAM,CAAC,UAACL,IAAI;MAAA,OAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM;IAAA,EAAC;IAC/DR,QAAQ,CAACS,YAAY,CAAC;EACxB,CAAC;EAED,IAAMP,SAAS;IAAA,IAAAe,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC5B,IAAI;QACF,MAAMjC,YAAY,CAACkC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACtB,KAAK,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF,CAAC;IAAA,gBANKpB,SAASA,CAAA;MAAA,OAAAe,IAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GAMd;EAED,IAAMxB,SAAS;IAAA,IAAAyB,KAAA,GAAAR,iBAAA,CAAG,aAAY;MAC5B,IAAI;QACF,IAAMS,UAAU,SAAS1C,YAAY,CAAC2C,OAAO,CAAC,OAAO,CAAC;QACtD,IAAID,UAAU,KAAK,IAAI,EAAE;UACvB3B,QAAQ,CAACoB,IAAI,CAACS,KAAK,CAACF,UAAU,CAAC,CAAC;QAClC;MACF,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IAAA,gBATKrB,SAASA,CAAA;MAAA,OAAAyB,KAAA,CAAAF,KAAA,OAAAC,SAAA;IAAA;EAAA,GASd;EAED,OACEnC,KAAA,CAACV,IAAI;IAAAkD,QAAA,GAEF/B,KAAK,CAACW,GAAG,CAAC,UAACC,IAAI;MAAA,OACdrB,KAAA,CAACV,IAAI;QAAAkD,QAAA,GACHxC,KAAA,CAACR,gBAAgB;UACfiD,KAAK,EAAEC,MAAM,CAACC,aAAc;UAC5BC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAM3B,mBAAmB,CAACI,IAAI,CAACC,EAAE,CAAC;UAAA,CAAC;UAAAkB,QAAA,GAE5C1C,IAAA,CAACL,IAAI;YACHgD,KAAK,EAAE,CACLC,MAAM,CAACG,QAAQ,EACfxB,IAAI,CAACG,SAAS,IAAIkB,MAAM,CAACI,iBAAiB,CAC1C;YAAAN,QAAA,EAEDnB,IAAI,CAAC0B;UAAI,CACN,CAAC,EACPjD,IAAA,CAACL,IAAI;YAACgD,KAAK,EAAEC,MAAM,CAACM,eAAgB;YAAAR,QAAA,EAAEnB,IAAI,CAAC4B;UAAW,CAAO,CAAC;QAAA,CAC9C,CAAC,EACnBnD,IAAA,CAACN,gBAAgB;UACfiD,KAAK,EAAEC,MAAM,CAACQ,YAAa;UAC3BN,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMnB,UAAU,CAACJ,IAAI,CAACC,EAAE,CAAC;UAAA,CAAC;UAAAkB,QAAA,EAEnC1C,IAAA,CAACL,IAAI;YAACgD,KAAK,EAAEC,MAAM,CAACS,gBAAiB;YAAAX,QAAA,EAAC;UAAQ,CAAM;QAAC,CACrC,CAAC;MAAA,GApBVnB,IAAI,CAACC,EAqBV,CAAC;IAAA,CACR,CAAC,EAGFxB,IAAA,CAACF,SAAS;MAACiB,OAAO,EAAEA,OAAQ;MAACR,YAAY,EAAEA,YAAa;MAACC,eAAe,EAAEA;IAAgB,CAAE,CAAC;EAAA,CACzF,CAAC;AAEX,CAAC;AAED,eAAeL,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}