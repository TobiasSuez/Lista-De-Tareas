{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\", \"variant\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n    themeOverrides = _ref.theme,\n    variant = _ref.variant,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n  if (theme.isV3 && variant) {\n    var font = theme.fonts[variant];\n    if (typeof font !== 'object') {\n      throw new Error(`Variant ${variant} was not provided properly. Valid variants are ${Object.keys(theme.fonts).join(', ')}.`);\n    }\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [font, styles.text, {\n        writingDirection: writingDirection,\n        color: theme.colors.onSurface\n      }, style]\n    }));\n  } else {\n    var _font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;\n    var textStyle = _objectSpread(_objectSpread({}, _font), {}, {\n      color: theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    });\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styles.text, textStyle, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  }\n}\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport var customAnimatedText = function customAnimatedText() {\n  return AnimatedText;\n};\nexport default AnimatedText;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAG9B,SAASC,gBAAgB;AAgCzB,SAASC,YAAY,OAKJ;EAAA,IAJfC,KAAK,GAIQC,KAJbD,KAAK;IACEE,cAAc,GAGRD,KAHbE,KAAK;IACLC,OAAO,GAEMH,KAFbG,OAAO;IACJC,gCACUJ;EACb,IAAME,KAAK,GAAGL,gBAAgB,CAACI,cAAc,CAAC;EAC9C,IAAMI,gBAAgB,GAAGC,WAAW,CAACC,YAAY,EAAE,CAACC,KAAK,GAAG,KAAK,GAAG,KAAK;EAEzE,IAAIN,KAAK,CAACO,IAAI,IAAIN,OAAO,EAAE;IACzB,IAAMO,IAAI,GAAGR,KAAK,CAACS,KAAK,CAACR,OAAO,CAAC;IACjC,IAAI,OAAOO,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIE,KAAK,CACZ,WAAUT,OAAQ,kDAAiDU,MAAM,CAACC,IAAI,CAC7EZ,KAAK,CAACS,KAAK,CACZ,CAACI,IAAI,CAAC,IAAI,CAAE,GAAE,CAChB;IACH;IAEA,OACEnB,oBAACoB,QAAQ,CAACC,IAAI,eACRb,IAAI;MACRL,KAAK,EAAE,CACLW,IAAI,EACJQ,MAAM,CAACC,IAAI,EACX;QAAEd,gBAAgB,EAAhBA,gBAAgB;QAAEe,KAAK,EAAElB,KAAK,CAACmB,MAAM,CAACC;MAAU,CAAC,EACnDvB,KAAK;IACL,GACF;EAEN,CAAC,MAAM;IACL,IAAMW,KAAI,GAAG,CAACR,KAAK,CAACO,IAAI,GAAGP,KAAK,CAACS,KAAK,CAACY,OAAO,GAAGrB,KAAK,CAACS,KAAK,CAACa,UAAU;IACvE,IAAMC,SAAS,mCACVf,KAAI;MACPU,KAAK,EAAElB,KAAK,CAACO,IAAI,GAAGP,KAAK,CAACmB,MAAM,CAACC,SAAS,GAAGpB,KAAK,CAACmB,MAAM,CAACF;IAAAA,EAC3D;IACD,OACEvB,oBAACoB,QAAQ,CAACC,IAAI,eACRb,IAAI;MACRL,KAAK,EAAE,CACLmB,MAAM,CAACC,IAAI,EACXM,SAAS,EACT;QACEpB;MACF,CAAC,EACDN,KAAK;IACL,GACF;EAEN;AACF;AAEA,IAAMmB,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC/BR,IAAI,EAAE;IACJS,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB;EAAA,OAC7B/B,YAAgD;AAAA;AAElD,eAAeA,YAAY","names":["React","useInternalTheme","AnimatedText","style","_ref","themeOverrides","theme","variant","rest","writingDirection","I18nManager","getConstants","isRTL","isV3","font","fonts","Error","Object","keys","join","Animated","Text","styles","text","color","colors","onSurface","regular","bodyMedium","textStyle","StyleSheet","create","textAlign","customAnimatedText"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\Typography\\AnimatedText.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, I18nManager, StyleSheet, TextStyle } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport type { VariantProp } from './types';\n\ntype Props<T> = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: VariantProp<T>;\n  style?: TextStyle;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({\n  style,\n  theme: themeOverrides,\n  variant,\n  ...rest\n}: Props<never>) {\n  const theme = useInternalTheme(themeOverrides);\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const font = theme.fonts[variant];\n    if (typeof font !== 'object') {\n      throw new Error(\n        `Variant ${variant} was not provided properly. Valid variants are ${Object.keys(\n          theme.fonts\n        ).join(', ')}.`\n      );\n    }\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          font,\n          styles.text,\n          { writingDirection, color: theme.colors.onSurface },\n          style,\n        ]}\n      />\n    );\n  } else {\n    const font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n    };\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          textStyle,\n          {\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport const customAnimatedText = <T,>() =>\n  AnimatedText as (props: Props<T>) => JSX.Element;\n\nexport default AnimatedText;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}