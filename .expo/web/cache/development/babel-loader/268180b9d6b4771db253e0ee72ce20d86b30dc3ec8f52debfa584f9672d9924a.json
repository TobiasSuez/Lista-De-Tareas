{"ast":null,"code":"import { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PaperProvider, useTheme } from 'react-native-paper';\nimport Input from \"./Componentes/input\";\nimport Boton from \"./Componentes/boton\";\nimport Lista from \"./Componentes/lista\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  return _jsx(PaperProvider, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Input, {}), _jsx(Boton, {}), _jsx(Lista, {})]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","PaperProvider","useTheme","Input","Boton","Lista","App","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/devandroid/Desktop/Lista-De-Tareas/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { PaperProvider, useTheme } from 'react-native-paper';\nimport Input from './Componentes/input';\nimport Boton from './Componentes/boton';\nimport Lista from './Componentes/lista'\nexport default function App() {\n  return (\n    <PaperProvider>\n    <View style={styles.container}>\n      <Input/>\n      <Boton/>\n      <Lista/>\n    </View>\n    </PaperProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n/*import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Modal,\n  TextInput,\n  FlatList,\n  AsyncStorage,\n} from 'react-native';\n\nconst App = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [taskName, setTaskName] = useState('');\n  const [taskDescription, setTaskDescription] = useState('');\n  const [tasks, setTasks] = useState([]);\n\n  // Cargar las tareas almacenadas en AsyncStorage al inicio\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  // Guardar las tareas en AsyncStorage cuando se actualice la lista de tareas\n  useEffect(() => {\n    saveTasks();\n  }, [tasks]);\n\n  const addTask = () => {\n    if (taskName.trim() === '') {\n      return;\n    }\n    const newTask = {\n      id: Date.now().toString(),\n      name: taskName,\n      description: taskDescription,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n    setTaskName('');\n    setTaskDescription('');\n    setModalVisible(false);\n  };\n\n  const markTaskAsCompleted = (taskId) => {\n    const updatedTasks = tasks.map((task) =>\n      task.id === taskId ? { ...task, completed: true } : task\n    );\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = (taskId) => {\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\n    setTasks(updatedTasks);\n  };\n\n  const saveTasks = async () => {\n    try {\n      await AsyncStorage.setItem('tasks', JSON.stringify(tasks));\n    } catch (error) {\n      console.error('Error saving tasks to AsyncStorage:', error);\n    }\n  };\n\n  const loadTasks = async () => {\n    try {\n      const savedTasks = await AsyncStorage.getItem('tasks');\n      if (savedTasks !== null) {\n        setTasks(JSON.parse(savedTasks));\n      }\n    } catch (error) {\n      console.error('Error loading tasks from AsyncStorage:', error);\n    }\n  };\n\n  const renderTask = ({ item }) => (\n    <View style={styles.taskContainer}>\n      <TouchableOpacity\n        style={styles.taskButton}\n        onPress={() => markTaskAsCompleted(item.id)}\n      >\n        <Text\n          style={[\n            styles.taskName,\n            item.completed && styles.completedTaskName,\n          ]}\n        >\n          {item.name}\n        </Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={styles.deleteButton}\n        onPress={() => deleteTask(item.id)}\n      >\n        <Text style={styles.deleteButtonText}>Eliminar</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <Modal\n        animationType=\"slide\"\n        transparent={false}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={styles.modalContainer}>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Nombre de la tarea\"\n            value={taskName}\n            onChangeText={(text) => setTaskName(text)}\n          />\n          <TextInput\n            style={styles.input}\n            placeholder=\"DescripciÃ³n de la tarea\"\n            value={taskDescription}\n            onChangeText={(text) => setTaskDescription(text)}\n          />\n          <TouchableOpacity\n            style={styles.addButton}\n            onPress={() => addTask()}\n          >\n            <Text style={styles.addButtonText}>Agregar Tarea</Text>\n          </TouchableOpacity>\n        </View>\n      </Modal>\n      <FlatList\n        data={tasks}\n        renderItem={renderTask}\n        keyExtractor={(item) => item.id}\n      />\n      <TouchableOpacity\n        style={styles.addButton}\n        onPress={() => setModalVisible(true)}\n      >\n        <Text style={styles.addButtonText}>Agregar Tarea</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n  },\n  addButton: {\n    backgroundColor: 'blue',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n  },\n  addButtonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  taskContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: 'gray',\n    paddingVertical: 10,\n  },\n  taskButton: {\n    flex: 1,\n  },\n  taskName: {\n    fontSize: 18,\n  },\n  completedTaskName: {\n    textDecorationLine: 'line-through',\n    color: 'gray',\n  },\n  deleteButton: {\n    marginLeft: 10,\n  },\n  deleteButtonText: {\n    color: 'red',\n  },\n});\n\nexport default App;\n*/"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC;AAAA;AAAA;AAE5C,SAASC,aAAa,EAAEC,QAAQ,QAAQ,oBAAoB;AAC5D,OAAOC,KAAK;AACZ,OAAOC,KAAK;AACZ,OAAOC,KAAK;AAA2B;AAAA;AACvC,eAAe,SAASC,GAAG,GAAG;EAC5B,OACE,KAAC,aAAa;IAAA,UACd,MAAC,IAAI;MAAC,KAAK,EAAEC,MAAM,CAACC,SAAU;MAAA,WAC5B,KAAC,KAAK,KAAE,EACR,KAAC,KAAK,KAAE,EACR,KAAC,KAAK,KAAE;IAAA;EACH,EACS;AAEpB;AAEA,IAAMD,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}