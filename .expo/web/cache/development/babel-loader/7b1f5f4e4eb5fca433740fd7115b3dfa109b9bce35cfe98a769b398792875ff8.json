{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getSelectionControlIOSColor } from \"../Checkbox/utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    themeOverrides = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getSelectionControlI = getSelectionControlIOSColor({\n        theme: theme,\n        disabled: disabled,\n        customColor: rest.color\n      }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n    var opacity = checked ? 1 : 0;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), React.createElement(View, {\n      style: {\n        opacity: opacity\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default RadioButtonIOS;\nexport { RadioButtonIOS };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAG9B,SAASC,gBAAgB;AAEzB,SAASC,2BAA2B;AACpC,OAAOC,qBAAqB;AAC5B,OAAOC,eAAe;AACtB,SAASC,kBAAkB;AAC3B,SAASC,WAAW,EAAEC,SAAS;AAsC/B,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAGC,MAQV;EAAA,IAPXC,QAAQ,GAOFD,KAPNC,QAAQ;IACRC,OAAO,GAMDF,KANNE,OAAO;IACAC,cAAc,GAKfH,KALNI,KAAK;IACLC,MAAM,GAIAL,KAJNK,MAAM;IACNC,KAAK,GAGCN,KAHNM,KAAK;IACLC,MAAM,GAEAP,KAFNO,MAAM;IACHC,gCACGR;EACN,IAAMI,KAAK,GAAGZ,gBAAgB,CAACW,cAAc,CAAC;EAE9C,OACEZ,oBAACK,kBAAkB,CAACa,QAAQ,QACxBC,iBAAgC,EAAK;IACrC,IAAMC,OAAO,GACXb,SAAS,CAAC;MACRc,YAAY,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEJ,KAAK;MAC5BD,MAAM,EAANA,MAAM;MACNC;IACF,CAAC,CAAC,KAAK,SAAS;IAElB,4BAAsCb,2BAA2B,CAAC;QAChEW,KAAK,EAALA,KAAK;QACLH,QAAQ,EAARA,QAAQ;QACRY,WAAW,EAAEL,IAAI,CAACM;MACpB,CAAC,CAAC;MAJMC,YAAY,yBAAZA,YAAY;MAAEC;IAKtB,IAAMC,OAAO,GAAGN,OAAO,GAAG,CAAC,GAAG,CAAC;IAE/B,OACEpB,oBAACI,eAAe,eACVa,IAAI;MACRU,UAAU;MACVF,WAAW,EAAEA,WAAY;MACzBd,OAAO,EACLD,QAAQ,GACJkB,SAAS,GACRC,eAAK,EAAK;QACTvB,WAAW,CAAC;UACVK,OAAO,EAAPA,OAAO;UACPI,KAAK,EAALA,KAAK;UACLe,aAAa,EAAEX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,aAAa;UACrCD;QACF,CAAC,CAAC;MACJ,CACL;MACDE,iBAAiB,EAAC,OAAO;MACzBC,kBAAkB,EAAE;QAAEtB,QAAQ,EAARA,QAAQ;QAAEU;MAAQ,CAAE;MAC1Ca,uBAAuB,EAAC,QAAQ;MAChCC,KAAK,EAAEC,MAAM,CAACC,SAAU;MACxBpB,MAAM,EAAEA,MAAO;MACfH,KAAK,EAAEA;IAAM,IAEbb,oBAACqC,IAAI;MAACH,KAAK,EAAE;QAAER;MAAQ;IAAE,GACvB1B,oBAACG,qBAAqB;MACpBmC,gBAAgB,EAAE,KAAM;MACxBC,IAAI,EAAC,OAAO;MACZC,IAAI,EAAE,EAAG;MACTjB,KAAK,EAAEC,YAAa;MACpBiB,SAAS,EAAC;IAAK,EACf,CACG,CACS;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDjC,cAAc,CAACkC,WAAW,GAAG,iBAAiB;AAE9C,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,eAAetC,cAAc;AAG7B,SAASA,cAAc","names":["React","useInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonContext","handlePress","isChecked","RadioButtonIOS","_ref","disabled","onPress","themeOverrides","theme","status","value","testID","rest","Consumer","context","checked","contextValue","customColor","color","checkedColor","rippleColor","opacity","borderless","undefined","event","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\RadioButton\\RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme?: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme: themeOverrides,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n        const opacity = checked ? 1 : 0;\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n            theme={theme}\n          >\n            <View style={{ opacity }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default RadioButtonIOS;\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}