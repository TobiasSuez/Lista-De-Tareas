{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"delayLongPress\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"mode\", \"children\", \"style\", \"contentStyle\", \"theme\", \"testID\", \"accessible\", \"disabled\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport { useInternalTheme } from \"../../core/theming\";\nimport hasTouchHandler from \"../../utils/hasTouchHandler\";\nimport { splitStyles } from \"../../utils/splitStyles\";\nimport Surface from \"../Surface\";\nimport CardActions from \"./CardActions\";\nimport CardContent from \"./CardContent\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport { getCardColors } from \"./utils\";\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    delayLongPress = _ref.delayLongPress,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onPressOut = _ref.onPressOut,\n    onPressIn = _ref.onPressIn,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    contentStyle = _ref.contentStyle,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'card' : _ref$testID,\n    accessible = _ref.accessible,\n    disabled = _ref.disabled,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isMode = React.useCallback(function (modeToCompare) {\n    return cardMode === modeToCompare;\n  }, [cardMode]);\n  var hasPassedTouchHandler = hasTouchHandler({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  });\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness,\n    isV3 = theme.isV3;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    }\n  };\n  var handlePressIn = useLatestCallback(function (e) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    runElevationAnimation('in');\n  });\n  var handlePressOut = useLatestCallback(function (e) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    runElevationAnimation('out');\n  });\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  var _getCardColors = getCardColors({\n      theme: theme,\n      mode: cardMode\n    }),\n    backgroundColor = _getCardColors.backgroundColor,\n    themedBorderColor = _getCardColors.borderColor;\n  var flattenedStyles = StyleSheet.flatten(style) || {};\n  var _flattenedStyles$bord = flattenedStyles.borderColor,\n    borderColor = _flattenedStyles$bord === void 0 ? themedBorderColor : _flattenedStyles$bord;\n  var _splitStyles = splitStyles(flattenedStyles, function (style) {\n      return style.startsWith('border') && style.endsWith('Radius');\n    }),\n    _splitStyles2 = _slicedToArray(_splitStyles, 2),\n    borderRadiusStyles = _splitStyles2[1];\n  var borderRadiusCombinedStyles = _objectSpread({\n    borderRadius: (isV3 ? 3 : 1) * roundness\n  }, borderRadiusStyles);\n  var content = React.createElement(View, {\n    style: [styles.innerContainer, contentStyle],\n    testID: testID,\n    accessible: accessible\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings,\n      borderRadiusStyles: borderRadiusStyles\n    }) : child;\n  }));\n  return React.createElement(Surface, _extends({\n    style: [isV3 && !isMode('elevated') && {\n      backgroundColor: backgroundColor\n    }, !isV3 && isMode('outlined') ? styles.resetElevation : {\n      elevation: computedElevation\n    }, borderRadiusCombinedStyles, style],\n    theme: theme\n  }, isV3 && {\n    elevation: isMode('elevated') ? computedElevation : 0\n  }, {\n    testID: `${testID}-container`\n  }, rest), isMode('outlined') && React.createElement(View, {\n    pointerEvents: \"none\",\n    testID: `${testID}-outline`,\n    style: [{\n      borderColor: borderColor\n    }, styles.outline, borderRadiusCombinedStyles]\n  }), hasPassedTouchHandler ? React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: disabled,\n    delayLongPress: delayLongPress,\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut\n  }, content) : content);\n};\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2\n  },\n  resetElevation: {\n    elevation: 0\n  }\n});\nexport default Card;","map":{"version":3,"mappings":"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","names":["React","useLatestCallback","useInternalTheme","hasTouchHandler","splitStyles","Surface","CardActions","CardContent","CardCover","CardTitle","getCardColors","Card","_ref","elevation","cardElevation","delayLongPress","onPress","onLongPress","onPressOut","onPressIn","mode","cardMode","children","style","contentStyle","themeOverrides","theme","testID","accessible","disabled","rest","isMode","useCallback","modeToCompare","hasPassedTouchHandler","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","isV3","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","e","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","computedElevation","backgroundColor","themedBorderColor","borderColor","flattenedStyles","StyleSheet","flatten","startsWith","endsWith","borderRadiusStyles","borderRadiusCombinedStyles","borderRadius","content","View","styles","innerContainer","index","cloneElement","resetElevation","pointerEvents","outline","TouchableWithoutFeedback","delayPressIn","Content","Actions","Cover","Title","create","flexShrink","borderWidth","position","width","height","zIndex"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\Card\\Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport Surface from '../Surface';\nimport CardActions from './CardActions';\nimport CardContent from './CardContent';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle from './CardTitle';\nimport { getCardColors } from './utils';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Style of card's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Text } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Text variant=\"titleLarge\">Card title</Text>\n *       <Text variant=\"bodyMedium\">Card content</Text>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  delayLongPress,\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  contentStyle,\n  theme: themeOverrides,\n  testID = 'card',\n  accessible,\n  disabled,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    }\n  };\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    runElevationAnimation('in');\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    runElevationAnimation('out');\n  });\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor: themedBorderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const { borderColor = themedBorderColor } = flattenedStyles;\n\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const borderRadiusCombinedStyles = {\n    borderRadius: (isV3 ? 3 : 1) * roundness,\n    ...borderRadiusStyles,\n  };\n\n  const content = (\n    <View\n      style={[styles.innerContainer, contentStyle]}\n      testID={testID}\n      accessible={accessible}\n    >\n      {React.Children.map(children, (child, index) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              index,\n              total,\n              siblings,\n              borderRadiusStyles,\n            })\n          : child\n      )}\n    </View>\n  );\n\n  return (\n    <Surface\n      style={[\n        isV3 && !isMode('elevated') && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        borderRadiusCombinedStyles,\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      testID={`${testID}-container`}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          testID={`${testID}-outline`}\n          style={[\n            {\n              borderColor,\n            },\n            styles.outline,\n            borderRadiusCombinedStyles,\n          ]}\n        />\n      )}\n\n      {hasPassedTouchHandler ? (\n        <TouchableWithoutFeedback\n          delayPressIn={0}\n          disabled={disabled}\n          delayLongPress={delayLongPress}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n        >\n          {content}\n        </TouchableWithoutFeedback>\n      ) : (\n        content\n      )}\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}