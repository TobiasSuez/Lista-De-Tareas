{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"disabled\", \"style\", \"titleRef\", \"titleStyle\", \"title\", \"mode\", \"theme\", \"testID\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport Text from \"../Typography/Text\";\nimport { modeTextVariant } from \"./utils\";\nvar AppbarContent = function AppbarContent(_ref) {\n  var titleColor = _ref.color,\n    subtitle = _ref.subtitle,\n    subtitleStyle = _ref.subtitleStyle,\n    onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    titleRef = _ref.titleRef,\n    titleStyle = _ref.titleStyle,\n    title = _ref.title,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'appbar-content' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3,\n    colors = theme.colors;\n  var titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : white;\n  var subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n  var modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer\n  };\n  var variant = modeTextVariant[mode];\n  var content = React.createElement(View, _extends({\n    pointerEvents: \"box-none\",\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID: testID\n  }, rest), typeof title === 'string' ? React.createElement(Text, _extends({}, isV3 && {\n    variant: variant\n  }, {\n    ref: titleRef,\n    style: [_objectSpread({\n      color: titleTextColor\n    }, isV3 ? theme.fonts[variant] : Platform.OS === 'ios' ? theme.fonts.regular : theme.fonts.medium), !isV3 && styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityRole: onPress ? 'none' : Platform.OS === 'web' ? 'heading' : 'header',\n    accessibilityTraits: \"header\",\n    testID: `${testID}-title-text`\n  }), title) : title, !isV3 && subtitle ? React.createElement(Text, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null);\n  if (onPress) {\n    return React.createElement(TouchableWithoutFeedback, {\n      accessibilityRole: touchableRole,\n      accessibilityTraits: touchableRole,\n      accessibilityComponentType: \"button\",\n      onPress: onPress,\n      disabled: disabled\n    }, content);\n  }\n  return content;\n};\nAppbarContent.displayName = 'Appbar.Content';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14\n  }\n});\nvar iosTouchableRole = ['button', 'header'];\nvar touchableRole = Platform.select({\n  ios: iosTouchableRole,\n  default: iosTouchableRole[0]\n});\nexport default AppbarContent;\nexport { AppbarContent };","map":{"version":3,"mappings":"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","names":["React","color","useInternalTheme","white","Text","modeTextVariant","AppbarContent","_ref","titleColor","subtitle","subtitleStyle","onPress","disabled","style","titleRef","titleStyle","title","mode","themeOverrides","theme","testID","rest","isV3","colors","titleTextColor","onSurface","subtitleColor","alpha","rgb","string","modeContainerStyles","small","styles","v3DefaultContainer","medium","v3MediumContainer","large","v3LargeContainer","variant","content","View","pointerEvents","container","ref","fonts","Platform","OS","regular","numberOfLines","accessible","accessibilityRole","accessibilityTraits","TouchableWithoutFeedback","touchableRole","accessibilityComponentType","displayName","StyleSheet","create","flex","paddingHorizontal","justifyContent","paddingBottom","paddingTop","fontSize","iosTouchableRole","select","ios","default"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\Appbar\\AppbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityRole,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $RemoveChildren, MD3TypescaleKey, ThemeProp } from '../../types';\nimport Text, { TextRef } from '../Typography/Text';\nimport { modeTextVariant } from './utils';\n\ntype TitleString = {\n  title: string;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\ntype TitleElement = { title: React.ReactNode; titleStyle?: never };\n\nexport type Props = $RemoveChildren<typeof View> & {\n  // For `title` and `titleStyle` props their types are duplicated due to the generation of documentation.\n  // Appropriate type for them are either `TitleString` or `TitleElement`, depends on `title` type.\n  /**\n   * Text or component for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title, if `title` is a string.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<TextRef>;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * @internal\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n} & (TitleString | TitleElement);\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  disabled,\n  style,\n  titleRef,\n  titleStyle,\n  title,\n  mode = 'small',\n  theme: themeOverrides,\n  testID = 'appbar-content',\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, colors } = theme;\n\n  const titleTextColor = titleColor\n    ? titleColor\n    : isV3\n    ? colors.onSurface\n    : white;\n\n  const subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n\n  const modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer,\n  };\n\n  const variant = modeTextVariant[mode] as MD3TypescaleKey;\n\n  const content = (\n    <View\n      pointerEvents=\"box-none\"\n      style={[styles.container, isV3 && modeContainerStyles[mode], style]}\n      testID={testID}\n      {...rest}\n    >\n      {typeof title === 'string' ? (\n        <Text\n          {...(isV3 && { variant })}\n          ref={titleRef}\n          style={[\n            {\n              color: titleTextColor,\n              ...(isV3\n                ? theme.fonts[variant]\n                : Platform.OS === 'ios'\n                ? theme.fonts.regular\n                : theme.fonts.medium),\n            },\n            !isV3 && styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityRole={\n            onPress\n              ? 'none'\n              : Platform.OS === 'web'\n              ? ('heading' as 'header')\n              : 'header'\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"header\"\n          testID={`${testID}-title-text`}\n        >\n          {title}\n        </Text>\n      ) : (\n        title\n      )}\n      {!isV3 && subtitle ? (\n        <Text\n          style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n          numberOfLines={1}\n        >\n          {subtitle}\n        </Text>\n      ) : null}\n    </View>\n  );\n\n  if (onPress) {\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-props\n      <TouchableWithoutFeedback\n        accessibilityRole={touchableRole}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={touchableRole}\n        accessibilityComponentType=\"button\"\n        onPress={onPress}\n        disabled={disabled}\n      >\n        {content}\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  return content;\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0,\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24,\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nconst iosTouchableRole: readonly AccessibilityRole[] = ['button', 'header'];\nconst touchableRole: AccessibilityRole = Platform.select({\n  ios: iosTouchableRole as unknown as 'button',\n  default: iosTouchableRole[0],\n});\n\nexport default AppbarContent;\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}