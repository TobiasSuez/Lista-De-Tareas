{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"cursorColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"outlineStyle\", \"textColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\", \"contentStyle\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from \"./helpers\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    cursorColor = _ref.cursorColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    outlineStyle = _ref.outlineStyle,\n    textColor = _ref.textColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'text-input-outlined' : _ref$testID,\n    contentStyle = _ref.contentStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _getConstants = getConstants(isV3),\n    INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n    MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n  var _ref4 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var _getOutlinedInputColo = getOutlinedInputColors({\n      activeOutlineColor: activeOutlineColor,\n      customOutlineColor: customOutlineColor,\n      textColor: textColor,\n      disabled: disabled,\n      error: error,\n      theme: theme\n    }),\n    inputTextColor = _getOutlinedInputColo.inputTextColor,\n    activeColor = _getOutlinedInputColo.activeColor,\n    outlineColor = _getOutlinedInputColo.outlineColor,\n    placeholderColor = _getOutlinedInputColo.placeholderColor,\n    errorColor = _getOutlinedInputColo.errorColor;\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? parentState.labeled : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelBackgroundColor = backgroundColor === 'transparent' ? theme.colors.background : backgroundColor;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    labelError: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: labelBackgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID,\n    contentStyle: contentStyle,\n    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var outlinedHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP : 0);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled: disabled\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    style: outlineStyle,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, label ? React.createElement(InputLabel, _extends({\n    labeled: parentState.labeled,\n    error: parentState.error,\n    focused: parentState.focused,\n    wiggle: Boolean(parentState.value && labelProps.labelError),\n    labelLayoutMeasured: parentState.labelLayout.measured,\n    labelLayoutWidth: parentState.labelLayout.width\n  }, labelProps, {\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  })) : null, render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: testID\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n    activeColor = _ref3.activeColor,\n    backgroundColor = _ref3.backgroundColor,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    focused = _ref3.focused,\n    outlineColor = _ref3.outlineColor,\n    roundness = _ref3.roundness,\n    style = _ref3.style;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }, style]\n  });\n};\nvar styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","AdornmentType","AdornmentSide","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","InputLabel","LabelBackground","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","cursorColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","outlineStyle","textColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","contentStyle","rest","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","_ref2","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelBackgroundColor","labelProps","labelError","wiggleOffsetX","maxFontSizeMultiplier","opacity","value","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","wiggle","Boolean","labelLayoutMeasured","labelLayoutWidth","labelBackground","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","margin","zIndex"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  cursorColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  outlineStyle,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-outlined',\n  contentStyle,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? parentState.labeled\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelBackgroundColor: ColorValue =\n    backgroundColor === 'transparent'\n      ? theme.colors.background\n      : backgroundColor;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: labelBackgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity:\n      parentState.value || parentState.focused\n        ? parentState.labelLayout.measured\n          ? 1\n          : 0\n        : 1,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP) : 0);\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        style={outlineStyle}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          {label ? (\n            <InputLabel\n              labeled={parentState.labeled}\n              error={parentState.error}\n              focused={parentState.focused}\n              wiggle={Boolean(parentState.value && labelProps.labelError)}\n              labelLayoutMeasured={parentState.labelLayout.measured}\n              labelLayoutWidth={parentState.labelLayout.width}\n              {...labelProps}\n              labelBackground={LabelBackground}\n              maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n            />\n          ) : null}\n          {render?.({\n            testID,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            cursorColor:\n              typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                lineHeight,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.getConstants().isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n              contentStyle,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n  style,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n      style,\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}