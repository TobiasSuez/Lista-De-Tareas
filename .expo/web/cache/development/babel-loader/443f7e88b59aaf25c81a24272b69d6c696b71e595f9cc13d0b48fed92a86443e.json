{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/devandroid/Desktop/Nueva carpeta/Lista-De-Tareas/Componentes/Aplicacion.jsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  Modal,\r\n  TextInput,\r\n  FlatList,\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst App = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Cargar las tareas almacenadas en AsyncStorage al inicio\r\n  useEffect(() => {\r\n    loadTasks();\r\n  }, []);\r\n\r\n  // Guardar las tareas en AsyncStorage cuando se actualice la lista de tareas\r\n  useEffect(() => {\r\n    saveTasks();\r\n  }, [tasks]);\r\n\r\n  const addTask = () => {\r\n    if (taskName.trim() === '') {\r\n      return;\r\n    }\r\n    const newTask = {\r\n      id: Date.now().toString(),\r\n      name: taskName,\r\n      description: taskDescription,\r\n      completed: false,\r\n    };\r\n    setTasks([...tasks, newTask]);\r\n    setTaskName('');\r\n    setTaskDescription('');\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const markTaskAsCompleted = (taskId) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === taskId ? { ...task, completed: true } : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const saveTasks = async () => {\r\n    try {\r\n      await AsyncStorage.setItem('tasks', JSON.stringify(tasks));\r\n    } catch (error) {\r\n      console.error('Error saving tasks to AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  const loadTasks = async () => {\r\n    try {\r\n      const savedTasks = await AsyncStorage.getItem('tasks');\r\n      if (savedTasks !== null) {\r\n        setTasks(JSON.parse(savedTasks));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading tasks from AsyncStorage:', error);\r\n    }\r\n  };\r\n\r\n  const renderTask = ({ item }) => (\r\n    <View style={styles.taskContainer}>\r\n      <TouchableOpacity\r\n        style={styles.taskButton}\r\n        onPress={() => markTaskAsCompleted(item.id)}\r\n      >\r\n        <Text\r\n          style={[\r\n            styles.taskName,\r\n            item.completed && styles.completedTaskName,\r\n          ]}\r\n        >\r\n          {item.name}\r\n        </Text>\r\n        <Text style={styles.taskDescription}>{item.description}</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity\r\n        style={styles.deleteButton}\r\n        onPress={() => deleteTask(item.id)}\r\n      >\r\n        <Text style={styles.deleteButtonText}>Eliminar</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}\r\n    backgroundColor=\"orange\">\r\n      \r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={false}\r\n        visible={modalVisible}\r\n        onRequestClose={() => setModalVisible(false)}\r\n      >\r\n        <View style={styles.modalContainer}>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Nombre de la tarea\"\r\n            value={taskName}\r\n            onChangeText={(text) => setTaskName(text)}\r\n          />\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"DescripciÃ³n de la tarea\"\r\n            value={taskDescription}\r\n            onChangeText={(text) => setTaskDescription(text)}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.addButton}\r\n            onPress={() => addTask()}\r\n          >\r\n            <Text style={styles.addButtonText}>Agregar Tarea</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </Modal>\r\n      <FlatList\r\n        data={tasks}\r\n        renderItem={renderTask}\r\n        keyExtractor={(item) => item.id}\r\n      />\r\n      <TouchableOpacity\r\n        style={styles.addButton}\r\n        onPress={() => setModalVisible(true)}\r\n      >\r\n        <Text style={styles.addButtonText}>Agregar Tarea</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#0c3f6a', \r\n  },\r\n  modalContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n    backgroundColor: '#0c3f6a', \r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: '60%',\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 10,\r\n    paddingHorizontal: 10,\r\n    backgroundColor: '#31a8ae',\r\n  },\r\n  addButton: {\r\n    backgroundColor: '#31a8ae', \r\n    padding: 10,\r\n    borderRadius: 5,\r\n    marginTop: 10,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  addButtonText: {\r\n    color: '#f3f0cd',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  taskContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: 'gray',\r\n    paddingVertical: 10,\r\n    backgroundColor: '#f3f0cd',\r\n    borderRadius: 10, \r\n  },\r\n  taskButton: {\r\n    flex: 1,\r\n  },\r\n  taskName: {\r\n    fontSize: 22,\r\n    flex: 1,\r\n  },\r\n  completedTaskName: {\r\n    textDecorationLine: 'line-through',\r\n    fontWeight: 'bold',\r\n    color: 'gray',\r\n    borderRadius: 10,\r\n  },\r\n  deleteButton: {\r\n    marginLeft: 10,\r\n    backgroundColor: 'red', \r\n    padding: 5,\r\n    borderRadius: 5,\r\n  },\r\n  deleteButtonText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  \r\n  taskDescription: {\r\n    fontSize: 18,\r\n    color: 'gray',\r\n  },\r\n});\r\n\r\nexport default App;\r\n*/"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}