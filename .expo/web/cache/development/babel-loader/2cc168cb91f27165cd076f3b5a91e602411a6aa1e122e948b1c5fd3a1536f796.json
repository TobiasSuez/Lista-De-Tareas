{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\", \"theme\", \"rippleColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { ICON_SIZE } from \"../constants\";\nimport { getConstants } from \"../helpers\";\nimport { getIconColor } from \"./utils\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID,\n    themeOverrides = _ref.theme,\n    disabled = _ref.disabled;\n  var _useInternalTheme = useInternalTheme(themeOverrides),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID,\n    disabled: disabled\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    customColor = _ref2.color,\n    themeOverrides = _ref2.theme,\n    rippleColor = _ref2.rippleColor,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID,\n    disabled = _React$useContext.disabled;\n  var onPressWithFocusControl = React.useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useInternalTheme(themeOverrides);\n  var iconColor = getIconColor({\n    theme: theme,\n    disabled: disabled,\n    isTextInputFocused: isTextInputFocused,\n    customColor: customColor\n  });\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: iconColor,\n    testID: testID,\n    theme: themeOverrides,\n    rippleColor: rippleColor\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","IconButton","ICON_SIZE","getConstants","getIconColor","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","_ref","icon","topPosition","side","themeOverrides","theme","disabled","isV3","ICON_OFFSET","top","contextState","Provider","value","TextInputIcon","_ref2","onPress","forceTextInputFocus","customColor","color","rippleColor","rest","useContext","onPressWithFocusControl","useCallback","e","iconColor","View","styles","container","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../../core/theming';\nimport type { $Omit, ThemeProp } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\nimport { getIconColor } from './utils';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color' | 'iconColor'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n  disabled?: boolean;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n    theme?: ThemeProp;\n    disabled?: boolean;\n  } & Omit<StyleContextType, 'style'>\n> = ({\n  icon,\n  topPosition,\n  side,\n  isTextInputFocused,\n  forceFocus,\n  testID,\n  theme: themeOverrides,\n  disabled,\n}) => {\n  const { isV3 } = useInternalTheme(themeOverrides);\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus,\n    testID,\n    disabled,\n  };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color: customColor,\n  theme: themeOverrides,\n  rippleColor,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID, disabled } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(\n    (e: GestureResponderEvent) => {\n      if (forceTextInputFocus && !isTextInputFocused) {\n        forceFocus();\n      }\n\n      onPress?.(e);\n    },\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\n  );\n\n  const theme = useInternalTheme(themeOverrides);\n\n  const iconColor = getIconColor({\n    theme,\n    disabled,\n    isTextInputFocused,\n    customColor,\n  });\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={iconColor}\n        testID={testID}\n        theme={themeOverrides}\n        rippleColor={rippleColor}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}