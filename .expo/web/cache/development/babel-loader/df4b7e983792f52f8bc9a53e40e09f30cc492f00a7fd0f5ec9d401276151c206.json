{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"rippleColor\", \"onIconPress\", \"searchAccessibilityLabel\", \"clearIcon\", \"clearAccessibilityLabel\", \"onClearIconPress\", \"traileringIcon\", \"traileringIconColor\", \"traileringIconAccessibilityLabel\", \"traileringRippleColor\", \"onTraileringIconPress\", \"right\", \"mode\", \"showDivider\", \"inputStyle\", \"placeholder\", \"elevation\", \"style\", \"theme\", \"value\", \"loading\", \"testID\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { useInternalTheme } from \"../core/theming\";\nimport { forwardRef } from \"../utils/forwardRef\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Divider from \"./Divider\";\nimport IconButton from \"./IconButton/IconButton\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport Surface from \"./Surface\";\nvar Searchbar = forwardRef(function (_ref, ref) {\n  var _theme$colors, _theme$colors2;\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customRippleColor = _ref.rippleColor,\n    onIconPress = _ref.onIconPress,\n    _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n    searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n    clearIcon = _ref.clearIcon,\n    _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n    clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n    onClearIconPress = _ref.onClearIconPress,\n    traileringIcon = _ref.traileringIcon,\n    traileringIconColor = _ref.traileringIconColor,\n    traileringIconAccessibilityLabel = _ref.traileringIconAccessibilityLabel,\n    customTraileringRippleColor = _ref.traileringRippleColor,\n    onTraileringIconPress = _ref.onTraileringIconPress,\n    right = _ref.right,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'bar' : _ref$mode,\n    _ref$showDivider = _ref.showDivider,\n    showDivider = _ref$showDivider === void 0 ? true : _ref$showDivider,\n    inputStyle = _ref.inputStyle,\n    placeholder = _ref.placeholder,\n    _ref$elevation = _ref.elevation,\n    elevation = _ref$elevation === void 0 ? 0 : _ref$elevation,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    value = _ref.value,\n    _ref$loading = _ref.loading,\n    loading = _ref$loading === void 0 ? false : _ref$loading,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'search-bar' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n  var handleClearPress = function handleClearPress(e) {\n    var _root$current, _rest$onChangeText;\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n    onClearIconPress === null || onClearIconPress === void 0 ? void 0 : onClearIconPress(e);\n  };\n  var roundness = theme.roundness,\n    dark = theme.dark,\n    isV3 = theme.isV3,\n    fonts = theme.fonts;\n  var placeholderTextColor = isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.placeholder;\n  var textColor = isV3 ? theme.colors.onSurfaceVariant : theme.colors.text;\n  var md2IconColor = dark ? textColor : color(textColor).alpha(0.54).rgb().string();\n  var iconColor = customIconColor || (isV3 ? theme.colors.onSurfaceVariant : md2IconColor);\n  var rippleColor = customRippleColor || color(textColor).alpha(0.32).rgb().string();\n  var traileringRippleColor = customTraileringRippleColor || color(textColor).alpha(0.32).rgb().string();\n  var font = isV3 ? _objectSpread(_objectSpread({}, fonts.bodyLarge), {}, {\n    lineHeight: Platform.select({\n      ios: 0,\n      default: fonts.bodyLarge.lineHeight\n    })\n  }) : theme.fonts.regular;\n  var isBarMode = isV3 && mode === 'bar';\n  var shouldRenderTraileringIcon = isBarMode && traileringIcon && !loading && (!value || right !== undefined);\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness\n    }, !isV3 && styles.elevation, isV3 && {\n      backgroundColor: theme.colors.elevation.level3,\n      borderRadius: roundness * (isBarMode ? 7 : 0)\n    }, styles.container, style],\n    testID: `${testID}-container`\n  }, theme.isV3 && {\n    elevation: elevation\n  }, {\n    theme: theme\n  }), React.createElement(IconButton, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    iconColor: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n        color = _ref2.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    theme: theme,\n    accessibilityLabel: searchAccessibilityLabel,\n    testID: `${testID}-icon`\n  }), React.createElement(TextInput, _extends({\n    style: [styles.input, _objectSpread(_objectSpread({\n      color: textColor\n    }, font), Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), isV3 && (isBarMode ? styles.barModeInput : styles.viewModeInput), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: placeholderTextColor,\n    selectionColor: (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value,\n    testID: testID\n  }, rest)), loading ? React.createElement(ActivityIndicator, {\n    testID: \"activity-indicator\",\n    style: isV3 ? styles.v3Loader : styles.loader\n  }) : React.createElement(View, {\n    pointerEvents: value ? 'auto' : 'none',\n    testID: `${testID}-icon-wrapper`,\n    style: [isV3 && !value && styles.v3ClearIcon, isV3 && right !== undefined && styles.v3ClearIconHidden]\n  }, React.createElement(IconButton, {\n    borderless: true,\n    accessibilityLabel: clearAccessibilityLabel,\n    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n        color = _ref3.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: isV3 ? 'close' : 'close-circle-outline',\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    testID: `${testID}-clear-icon`,\n    accessibilityRole: \"button\",\n    theme: theme\n  })), shouldRenderTraileringIcon ? React.createElement(IconButton, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    onPress: onTraileringIconPress,\n    iconColor: traileringIconColor || theme.colors.onSurfaceVariant,\n    rippleColor: traileringRippleColor,\n    icon: traileringIcon,\n    accessibilityLabel: traileringIconAccessibilityLabel,\n    testID: `${testID}-trailering-icon`\n  }) : null, isBarMode && (right === null || right === void 0 ? void 0 : right({\n    color: textColor,\n    style: styles.rightStyle,\n    testID: testID\n  })), isV3 && !isBarMode && showDivider && React.createElement(Divider, {\n    bold: true,\n    style: [styles.divider, {\n      backgroundColor: theme.colors.outline\n    }],\n    testID: `${testID}-divider`\n  }));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0\n  },\n  barModeInput: {\n    paddingLeft: 0,\n    minHeight: 56\n  },\n  viewModeInput: {\n    paddingLeft: 0,\n    minHeight: 72\n  },\n  elevation: {\n    elevation: 4\n  },\n  loader: {\n    margin: 10\n  },\n  v3Loader: {\n    marginHorizontal: 16\n  },\n  rightStyle: {\n    marginRight: 16\n  },\n  v3ClearIcon: {\n    position: 'absolute',\n    right: 0,\n    marginLeft: 16\n  },\n  v3ClearIconHidden: {\n    display: 'none'\n  },\n  divider: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  }\n});\nexport default Searchbar;","map":{"version":3,"mappings":"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","names":["React","color","useInternalTheme","forwardRef","ActivityIndicator","Divider","IconButton","MaterialCommunityIcon","Surface","Searchbar","ref","icon","_ref","customIconColor","iconColor","customRippleColor","rippleColor","onIconPress","searchAccessibilityLabel","clearIcon","clearAccessibilityLabel","onClearIconPress","traileringIcon","traileringIconColor","traileringIconAccessibilityLabel","customTraileringRippleColor","traileringRippleColor","onTraileringIconPress","right","mode","showDivider","inputStyle","placeholder","elevation","style","themeOverrides","theme","value","loading","testID","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","e","_root$current","onChangeText","_rest$onChangeText","roundness","dark","isV3","fonts","placeholderTextColor","colors","onSurface","_theme$colors","textColor","onSurfaceVariant","text","md2IconColor","alpha","rgb","string","font","bodyLarge","lineHeight","Platform","select","ios","default","regular","isBarMode","shouldRenderTraileringIcon","undefined","borderRadius","styles","backgroundColor","level3","container","accessibilityRole","borderless","onPress","size","_ref2","name","direction","I18nManager","getConstants","isRTL","accessibilityLabel","TextInput","web","outline","barModeInput","viewModeInput","selectionColor","_theme$colors2","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","v3Loader","loader","View","pointerEvents","v3ClearIcon","v3ClearIconHidden","_ref3","rightStyle","bold","divider","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","minHeight","margin","marginHorizontal","marginRight","position","marginLeft","display","bottom","width"],"sources":["C:\\Users\\devandroid\\Desktop\\Lista-De-Tareas\\node_modules\\react-native-paper\\src\\components\\Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../core/theming';\nimport type { ThemeProp } from '../types';\nimport { forwardRef } from '../utils/forwardRef';\nimport ActivityIndicator from './ActivityIndicator';\nimport Divider from './Divider';\nimport type { IconSource } from './Icon';\nimport IconButton from './IconButton/IconButton';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\n\ninterface Style {\n  marginRight: number;\n}\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Search layout mode, the default value is \"bar\".\n   */\n  mode?: 'bar' | 'view';\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: (e: GestureResponderEvent) => void;\n\n  /**\n   * Callback to execute if we want to add custom behaviour to close icon button.\n   */\n  onClearIconPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Custom icon for clear button, default will be icon close. It's visible when `loading` is set to `false`.\n   * In v5.x with theme version 3, `clearIcon` is visible only `right` prop is not defined.\n   */\n  clearIcon?: IconSource;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Icon name for the right trailering icon button.\n   * Works only when `mode` is set to \"bar\". It won't be displayed if `loading` is set to `true`.\n   */\n  traileringIcon?: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Custom color for the right trailering icon, default will be derived from theme\n   */\n  traileringIconColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Color of the trailering icon ripple effect.\n   */\n  traileringRippleColor?: ColorValue;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Callback to execute on the right trailering icon button press.\n   */\n  onTraileringIconPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the right trailering icon button. This is read by the screen reader when the user taps the button.\n   */\n  traileringIconAccessibilityLabel?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Callback which returns a React element to display on the right side.\n   * Works only when `mode` is set to \"bar\".\n   */\n  right?: (props: {\n    color: string;\n    style: Style;\n    testID: string;\n  }) => React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to show `Divider` at the bottom of the search.\n   * Works only when `mode` is set to \"view\". True by default.\n   */\n  showDivider?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = forwardRef<TextInputHandles, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      rippleColor: customRippleColor,\n      onIconPress,\n      searchAccessibilityLabel = 'search',\n      clearIcon,\n      clearAccessibilityLabel = 'clear',\n      onClearIconPress,\n      traileringIcon,\n      traileringIconColor,\n      traileringIconAccessibilityLabel,\n      traileringRippleColor: customTraileringRippleColor,\n      onTraileringIconPress,\n      right,\n      mode = 'bar',\n      showDivider = true,\n      inputStyle,\n      placeholder,\n      elevation = 0,\n      style,\n      theme: themeOverrides,\n      value,\n      loading = false,\n      testID = 'search-bar',\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = (e: any) => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n      onClearIconPress?.(e);\n    };\n\n    const { roundness, dark, isV3, fonts } = theme;\n\n    const placeholderTextColor = isV3\n      ? theme.colors.onSurface\n      : theme.colors?.placeholder;\n    const textColor = isV3 ? theme.colors.onSurfaceVariant : theme.colors.text;\n    const md2IconColor = dark\n      ? textColor\n      : color(textColor).alpha(0.54).rgb().string();\n    const iconColor =\n      customIconColor || (isV3 ? theme.colors.onSurfaceVariant : md2IconColor);\n    const rippleColor =\n      customRippleColor || color(textColor).alpha(0.32).rgb().string();\n    const traileringRippleColor =\n      customTraileringRippleColor ||\n      color(textColor).alpha(0.32).rgb().string();\n\n    const font = isV3\n      ? {\n          ...fonts.bodyLarge,\n          lineHeight: Platform.select({\n            ios: 0,\n            default: fonts.bodyLarge.lineHeight,\n          }),\n        }\n      : theme.fonts.regular;\n\n    const isBarMode = isV3 && mode === 'bar';\n    const shouldRenderTraileringIcon =\n      isBarMode &&\n      traileringIcon &&\n      !loading &&\n      (!value || right !== undefined);\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          isV3 && {\n            backgroundColor: theme.colors.elevation.level3,\n            borderRadius: roundness * (isBarMode ? 7 : 0),\n          },\n          styles.container,\n          style,\n        ]}\n        testID={`${testID}-container`}\n        {...(theme.isV3 && { elevation })}\n        theme={theme}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          theme={theme}\n          accessibilityLabel={searchAccessibilityLabel}\n          testID={`${testID}-icon`}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...font,\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            isV3 && (isBarMode ? styles.barModeInput : styles.viewModeInput),\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={placeholderTextColor}\n          selectionColor={theme.colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          testID={testID}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={isV3 ? styles.v3Loader : styles.loader}\n          />\n        ) : (\n          // Clear icon should be always rendered within Searchbar – it's transparent,\n          // without touch events, when there is no value. It's done to avoid issues\n          // with the abruptly stopping ripple effect and changing bar width on web,\n          // when clearing the value.\n          <View\n            pointerEvents={value ? 'auto' : 'none'}\n            testID={`${testID}-icon-wrapper`}\n            style={[\n              isV3 && !value && styles.v3ClearIcon,\n              isV3 && right !== undefined && styles.v3ClearIconHidden,\n            ]}\n          >\n            <IconButton\n              borderless\n              accessibilityLabel={clearAccessibilityLabel}\n              iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n              rippleColor={rippleColor}\n              onPress={handleClearPress}\n              icon={\n                clearIcon ||\n                (({ size, color }) => (\n                  <MaterialCommunityIcon\n                    name={isV3 ? 'close' : 'close-circle-outline'}\n                    color={color}\n                    size={size}\n                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                  />\n                ))\n              }\n              testID={`${testID}-clear-icon`}\n              accessibilityRole=\"button\"\n              theme={theme}\n            />\n          </View>\n        )}\n        {shouldRenderTraileringIcon ? (\n          <IconButton\n            accessibilityRole=\"button\"\n            borderless\n            onPress={onTraileringIconPress}\n            iconColor={traileringIconColor || theme.colors.onSurfaceVariant}\n            rippleColor={traileringRippleColor}\n            icon={traileringIcon}\n            accessibilityLabel={traileringIconAccessibilityLabel}\n            testID={`${testID}-trailering-icon`}\n          />\n        ) : null}\n        {isBarMode &&\n          right?.({ color: textColor, style: styles.rightStyle, testID })}\n        {isV3 && !isBarMode && showDivider && (\n          <Divider\n            bold\n            style={[\n              styles.divider,\n              {\n                backgroundColor: theme.colors.outline,\n              },\n            ]}\n            testID={`${testID}-divider`}\n          />\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  barModeInput: {\n    paddingLeft: 0,\n    minHeight: 56,\n  },\n  viewModeInput: {\n    paddingLeft: 0,\n    minHeight: 72,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n  v3Loader: {\n    marginHorizontal: 16,\n  },\n  rightStyle: {\n    marginRight: 16,\n  },\n  v3ClearIcon: {\n    position: 'absolute',\n    right: 0,\n    marginLeft: 16,\n  },\n  v3ClearIconHidden: {\n    display: 'none',\n  },\n  divider: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n});\n\nexport default Searchbar;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}